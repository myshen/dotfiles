source ~/.vim/rc.d/0.pkgs.vim
source ~/.vim/rc.d/z.leader.vim

" Thanks sheerun
let mapleader = '\'
map <Space> <Leader>

" join jump
" http://blog.sanctum.geek.nz/vim-annoyances/
nnoremap J mzJ`z
" center screen on jump
nnoremap n nzz
" nnoremap } }zz

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
  set t_Co=256
endif

" http://vim.wikia.com/wiki/Fix_syntax_highlighting
syntax enable sync minlines=2048
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

" color scheme
let base16colorspace=256  " Access colors present in 256 colorspace
colorscheme base16-tomorrow

" Terminal colors http://blog.infinitered.com/entries/show/6
set background=dark " Do this after colorscheme. It doesn't work before.

" Always show status bar, we have enough space
set laststatus=2

set number

set hlsearch
set incsearch
set ignorecase

set nowrap

set autoindent
set title
set mouse=a

" We're modern. Send more characters!
set ttyfast
" Don't redraw when playing macros
set lazyredraw

" Hide buffers instead of closing.
set hidden

set listchars=tab:»\ ,eol:¬,trail:.,extends:#,nbsp:.

set pastetoggle=<F2>

" tagbar
map <Leader>t :TagbarToggle<CR>

" NERDTree
map <Leader>e :NERDTreeToggle<CR>
map <Leader>E :NERDTreeFind<CR>
" https://github.com/ketan/vimrc/blob/master/vimrc.nerdtree
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '\.gem$',  '\.rbc$', '\~$']
" netrw split explorer http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/
" Alternatively, use https://github.com/tpope/vim-vinegar
let NERDTreeHijackNetrw=1
let NERDTreeShowFiles=1           " Show hidden files, too
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1          " Quit on opening files from the tree
let NERDTreeHighlightCursorline=1 " Highlight the selected entry in the tree

" Write a file with sudo priviledges
cmap w!! w !sudo tee % >/dev/null

set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc
" nnoremap `'
" nnoremap '`
set history=50
runtime macros/matchit.vim
set wildmenu
set wildmode=longest,list
set smartcase

" Briefly jump to the matched close block
set showmatch
set matchtime=0

set ruler
set showcmd
set showmode

" Keep more lines of context visible
set scrolloff=5
set sidescroll=1
set sidescrolloff=5

" xterm title
set title

" Make backspace delete intuitively
set backspace=indent,eol,start

" Be quiet
set noerrorbells
set shortmess+=I

" Put backup files and swap files in one place
set nobackup
set noswapfile
set backupdir=~/tmp,/tmp
set directory=~/tmp,/tmp

if has("mouse")
    set mouse=a
endif

source ~/.vim/rc.d/1.ftypes.vim

if has('autocmd')
else
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
endif

" Sparkup no conflict with autocomplete
let g:sparkupNextMapping = '<c-x>'

" Cursor line in active window
nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
autocmd WinLeave * set nocursorline
autocmd WinEnter * set cursorline
set cursorline

" sudo write
cmap w!! %!sudo tee > /dev/null %

" Color 80 column
if exists('+colorcolumn')
    set colorcolumn=80
    highlight colorcolumn ctermbg=235
else
    highlight LongLine ctermbg=darkred
    au BufWinEnter * let w:m2=matchadd('LongLine', '\%>80v.\+', -1)
endif

" Copy current line w/o indent
nnoremap vv ^vg_

" corrections
iab consloe console
iab lgo log

highlight Search ctermbg=blue ctermfg=black

" Folding
set foldmethod=marker
" Don't autofold too much
set foldlevel=5
" http://dhruvasagar.com/2013/03/28/vim-better-foldtext
function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldcharstart = match(&fillchars, 'fold:\zs')
  let foldchar = strpart(&fillchars, foldcharstart, match(&fillchars, 'fold:.*\zs[,$]')-foldcharstart)
  #let foldchar = '·'
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let length = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g'))
  return foldtextstart . repeat(foldchar, winwidth(0)-length) . foldtextend
endfunction
set foldtext=NeatFoldText()


" I can type
" :help
noremap <F1> <nop>
" :ex 
noremap Q <nop>
" :man
noremap K <nop>

" retain selection in visual mode when indenting blocks
vnoremap < <gv
vnoremap > >gv

" Allow moving into blank space in virtual
set virtualedit=block

" Split in intuitive direction
set splitbelow
set splitright

" " Easier window switching
" " http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide#window-splits
" map <c-j> <c-w>j
" map <c-k> <c-w>k
" map <c-l> <c-w>l
" map <c-h> <c-w>h

" Don't skip lines when wrapped
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
" wrap on word instead of character
set linebreak

" ShowMarks
let g:showmarks_enable=0
highlight SignColumn ctermbg=233
highlight ShowMarksHLl ctermfg=9 ctermbg=17
highlight ShowMarksHLu ctermfg=1 ctermbg=17
highlight ShowMarksHLo ctermfg=33 ctermbg=17
highlight ShowMarksHLm ctermfg=166 ctermbg=17

" TagList
" https://aufather.wordpress.com/2010/09/01/taglist-in-vim/
"let Tlist_Close_On_Select = 1 "close taglist window once we selected something
"let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
"let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window
"let Tlist_Highlight_Tag_On_BufEnter = 1 "highlight current tag in taglist window
"let Tlist_Use_Right_Window = 1 "display taglist window on the right
"let Tlist_Process_File_Always = 1 "even without taglist window, create tags file, required for displaying tag in statusline
"let Tlist_Display_Prototype = 1 "display full prototype instead of just function name
" nnoremap <F5> :TlistToggle<CR>
" nnoremap <F6> :TlistShowPrototype<CR>

" http://stackoverflow.com/a/1536094/533198
function! Wipeout()
  " list of *all* buffer numbers
  let l:buffers = range(1, bufnr('$'))

  " what tab page are we in?
  let l:currentTab = tabpagenr()
  try
    " go through all tab pages
    let l:tab = 0
    while l:tab < tabpagenr('$')
      let l:tab += 1

      " go through all windows
      let l:win = 0
      while l:win < winnr('$')
        let l:win += 1
        " whatever buffer is in this window in this tab, remove it from
        " l:buffers list
        let l:thisbuf = winbufnr(l:win)
        call remove(l:buffers, index(l:buffers, l:thisbuf))
      endwhile
    endwhile

    " if there are any buffers left, delete them
    if len(l:buffers)
      execute 'bwipeout' join(l:buffers)
    endif
  finally
    " go back to our original tab page
    execute 'tabnext' l:currentTab
  endtry
endfunction

" Skeleton files
" http://vim.runpaint.org/typing/using-templates/
autocmd! BufNewFile * silent! 0r ~/.vim/skel/tmpl.%:e

" Restore sessions when entering vim without arguments
" save global session
nnoremap <leader>S :mksession! ~/tmp/saved_session.vim<CR>
" save and close all files and save global session
nnoremap <leader>qs :mksession! ~/tmp/saved_session.vim<CR>:wqa<CR>
" close all files without saving and save global session
nnoremap <leader>www :mksession! ~/tmp/saved_session.vim<CR>:qa!<CR>

function! RestoreSession()
  " vim called without arguments
  let restorefile='~/tmp/saved_session.vim'
  if argc() == 0 && filereadable(restorefile)
    execute 'source '.restorefile
  end
endfunction
autocmd VimEnter * call RestoreSession()

""" Unite
nnoremap <leader>f :Unite file_rec/async<cr>
nnoremap <leader>/ :Unite grep:.<cr>
nnoremap <leader>y :Unite history/yanks<cr>
nnoremap <leader>s :Unite -quick-match buffer<cr>

"set statusline=%<%f\ %h%m%r\ %1*%{TagInStatusLine()}%*%=%-14.(%l,%c%V%)\ %P

" command to clear the query
command! C let @/=""

" Ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" pymode
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0
let g:pymode_rope_regenerate_on_write = 0

" Indent guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 0
let g:indent_guides_start_level = 1
highlight IndentGuidesOdd  ctermbg=234
highlight IndentGuidesEven ctermbg=235

set ttimeout
set ttimeoutlen=100

" http://stackoverflow.com/a/25233145
function! HighlightWordUnderCursor()
    if getline(".")[col(".")-1] !~# '[[:punct:][:blank:]]' 
        exec 'match' 'Search' '/\V\<'.expand('<cword>').'\>/' 
    else 
        match none 
    endif
endfunction

" Jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Quickly select text you just pasted:
noremap gV `[v`]

" Stop that stupid window from popping up:
map q: :q`]`

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
" configures CtrlP to use git or silver searcher for autocompletion
let g:ctrlp_use_caching = 0
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor

  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
        \ 
  }
endif

" command line emacs style
" https://statico.github.io/vim.html
:cnoremap <C-a>  <Home>
:cnoremap <C-b>  <Left>
:cnoremap <C-f>  <Right>
:cnoremap <C-d>  <Delete>
:cnoremap <M-b>  <S-Left>
:cnoremap <M-f>  <S-Right>
:cnoremap <M-d>  <S-right><Delete>
:cnoremap <Esc>b <S-Left>
:cnoremap <Esc>f <S-Right>
:cnoremap <Esc>d <S-right><Delete>
cnoremap <C-g>  <C-c>


nmap <C-e> :e#<CR>
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>

nmap \t :set expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap \T :set expandtab tabstop=8 shiftwidth=8 softtabstop=4<CR>
nmap \M :set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4<CR>
nmap \m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

nmap \w :setlocal wrap!<CR>:setlocal wrap?<CR>

" swap buffers :b#

" Make a simple "search" text object.
" http://vim.wikia.com/wiki/Copy_or_change_search_hit
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
    omap s :normal vs<CR>

" https://github.com/bpierre/dotfiles/blob/master/vimrc
" create the directories to the current file
function! CreateDirectoriesToFile()
  let curdir = expand('%:p:h')
  call system('mkdir -p "'.curdir.'"')
  echo 'created '.curdir
endfunction


" Autojump to the last edited position when a file is reopened
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
                     \ exe "normal g'\"" | endif
