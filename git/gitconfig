[include]
        path = .dotfiles_local/git/name.cfg
[merge]
	tool = vimdiff
[diff]
        #external = git_diff_vim_wrapper
        color = auto
[core]
        excludesfile = ~/.dotfiles/git/gitignore
[alias]
        # the following are stolen from someone
        lgr = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
        lg = log --graph --all --decorate --oneline
        lgs = log --graph --decorate --oneline

        st = status

        cl = clone
        
        ci = commit
        cm = commit -m
        cma = commit -a -m
        ca = commit --amend --no-edit
        amend = commit --amend --no-edit
        caa = commit -a --amend -C HEAD
        filelog = log -u
        fl = log -u
        
        ai = add --interactive
        
        co = checkout
        br = branch 
        #"!git branch -ra | grep -v done"
        bra = branch -ra
        #list commands
        le = log --oneline --decorate
        ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
        ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
        lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
        ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
        lc  = "!f() { git ll "$1"^.."$1"; }; f"
        lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
        #list all aliases
        la = "!git config -l | grep alias | cut -c 7-"
        diff = diff --word-diff
        d = diff --word-diff
        dc = diff --cached
        #list modified files in last commit
        dl = "!git ll -1"
        #diff last commit
        dlc = diff --cached HEAD^
        dr  = "!f() { git diff "$1"^.."$1"; }; f"
        diffr  = "!f() { git diff "$1"^.."$1"; }; f"
        branch = branch -ra
        
        #reset commands
        r = reset
        r1 = reset HEAD^
        r2 = reset HEAD^^
        rh = reset --hard
        rh1 = reset HEAD^ --hard
        rh2 = reset HEAD^^ --hard

	cb = rev-parse --abbrev-ref HEAD
        
        #git svn
        svnr = svn rebase
        svnd = svn dcommit
        svnl = svn log --oneline --show-commit
        
        #stash
        sl = stash list
        sa = stash apply
        ss = stash save
        
        cp = cherry-pick
        grep = grep -Ii
        gr = grep -Ii
        #grep from root folder
        gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
        
        #grep on filename
        f = "!git ls-files | grep -i"
        
        #rename branch tree to done-
        done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
        
	# Temporarily ignore changes to a file
        # assume aliases
        assume = update-index --assume-unchanged
        unassume = update-index --no-assume-unchanged
        # show assumed files
        assumed = "!git ls-files -v | grep ^h | cut -c 3-"
        # unassume all the assumed files
        unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
        assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
        
        lasttag = describe --tags --abbrev=0
        lt = describe --tags --abbrev=0
        
        # merges
        ours = "!f() { git co --ours $@ && git add $@; }; f"
        theirs = "!f() { git co --theirs $@ && git add $@; }; f"

	# ribbon
	# http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
	ribbon = tag --force _ribbon origin/master
	catchup = log --patch --reverse --topo-order --first-parent -m _ribbon..origin/develop
	catchupfull = log --patch --reverse --topo-order _ribbon..origin/develop

[color]
	ui = auto
